#! /bin/bash

DAY=$1
[[ -z $2 ]] && YEAR=2024 || YEAR=$2

# Day must be passed as an argument
if [ -z "$DAY" ]; then
  echo "Please provide the day as an argument."
  exit 0
fi

# Don't try to setup days before the 1st or after the 25th
if (("$DAY" > 25 || "$DAY" < 1)); then
  echo "There's no Day $1 in the advent calendar!"
  exit 0
fi

# Don't try to set up years with no AoC (or in the future)
if ((YEAR < 2015 || YEAR > $(date +"%Y"))); then
  echo "The year passed must be a valid AoC year!"
  exit 0
fi

# Warn and quit if no .cookie file found
COOKIE=.cookie
if [ ! -f "$COOKIE" ]; then
  echo "Store your AoC session cookie in '.cookie'!"
  exit 0
fi

# Create the class files for the given day
PADDED=$(printf "%02d" "$DAY")
DAYSTR="day${PADDED}"
SOLUTION_PATH="src/${DAYSTR}"
TEST_PATH="test/${DAYSTR}"

if [ -f "SOLUTION_PATH" ]; then
  echo "You've already set up Day $DAY !"
  exit 0
fi

# Ensure the paths exist
SOLUTION_PATH="src/${DAYSTR}"
EXAMPLE_PATH="test/day${PADDED}/examples"
RESOURCE_PATH="test/day${PADDED}/input"
mkdir -p $SOLUTION_PATH # Ensure directory exists
mkdir -p $EXAMPLE_PATH  # Ensure directory exists
mkdir -p $RESOURCE_PATH # Ensure directory exists

cat >"${SOLUTION_PATH}/${DAYSTR}.gleam" <<EOL
pub type Input =
  Nil

pub type Output =
  Nil

pub const input_path = "test/${DAYSTR}/input/input.txt"

pub const example1_path = "test/${DAYSTR}/examples/example1.txt"

pub const example2_path = "test/${DAYSTR}/examples/example2.txt"
EOL

cat >"${SOLUTION_PATH}/parse.gleam" <<EOL
import ${DAYSTR}/${DAYSTR}.{type Input}
import gleam/string
import simplifile

pub fn read_input(input_path) -> Input {
  let assert Ok(contents) = simplifile.read(input_path)
  string.split(contents, on: "\n")
}
EOL

cat >"${SOLUTION_PATH}/part1.gleam" <<EOL
import ${DAYSTR}/${DAYSTR}.{type Input, type Output}

pub fn solve(input: Input) -> Output {
  todo
}
EOL

cat >"${SOLUTION_PATH}/part2.gleam" <<EOL
import ${DAYSTR}/${DAYSTR}.{type Input, type Output}

pub fn solve(input: Input) -> Output {
  todo
}
EOL

cat >"${TEST_PATH}/${DAYSTR}_test.gleam" <<EOL
import ${DAYSTR}/${DAYSTR}
import ${DAYSTR}/parse
import ${DAYSTR}/part1
import ${DAYSTR}/part2
import gleeunit/should

const example1_answer = Nil

const part1_answer = Nil

const example2_answer = Nil

const part2_answer = Nil

pub fn example1_test() {
  ${DAYSTR}.example1_path
  |> parse.read_input
  |> part1.solve
  |> should.equal(example1_answer)
}

// pub fn part1_test() {
//   ${DAYSTR}.input_path
//   |> parse.read_input
//   |> part1.solve
//   |> should.equal(part1_answer)
// }

// pub fn example2_test() {
//   ${DAYSTR}.example2_path
//   |> parse.read_input
//   |> part2.solve
//   |> should.equal(example2_answer)
// }

// pub fn part2_test() {
//   ${DAYSTR}.input_path
//   |> parse.read_input
//   |> part2.solve
//   |> should.equal(part2_answer)
// }
EOL

# Fetch the input with aoc-cli
INPUT_PATH="${RESOURCE_PATH}/input.txt"
aoc -s $COOKIE -y "$YEAR" -d "$DAY" -I -i "$INPUT_PATH" -o download

# Create a blank file for the first example (others can be created manually)
touch "${EXAMPLE_PATH}/example1.txt"
touch "${EXAMPLE_PATH}/example2.txt"
